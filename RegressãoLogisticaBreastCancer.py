# -*- coding: utf-8 -*-
"""Atividade01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c9f22TyRqmkVM1KaccMZmmK9eKeZzoru

# **Exemplo de aplicação de RL no dataset Iris**

# **breast cancer**
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn import datasets
from sklearn.decomposition import PCA

# importar os dados
iris = datasets.load_breast_cancer()
X = iris.data[:, :2]  # utilizar as duas primeiras (0 e 1) caracteristicas/features
y = iris.target

print(iris.data[:10, :], end='\n\n') # os 10 primeiros exemplos originais
print(X[:10, :]) # os 10 primeiros exemplos com 2 features
print(y[110:120])

# Definir os limites dos eixos x e y (opcional)
x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5

# Criar uma figura
plt.figure(2, figsize=(8, 6))
plt.clf()

# Plotar os dados de treino em 2D, considerando a base de dados X com 2 features
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1,
            edgecolor='k')
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')

plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)
plt.xticks(())
plt.yticks(())

# Para um melhor entendimento dos dados em dimensões
# Vamos plotar as três primeiras dimensões de acordo com o PCA
fig = plt.figure(1, figsize=(8, 6))
ax = Axes3D(fig, elev=-150, azim=110)
X_reduced = PCA(n_components=3).fit_transform(iris.data)
ax.scatter(X_reduced[:, 0], X_reduced[:, 1], X_reduced[:, 2], c=y,
           cmap=plt.cm.Set1, edgecolor='k', s=40)
ax.set_title("First three PCA directions")
ax.set_xlabel("1st eigenvector")
ax.w_xaxis.set_ticklabels([])
ax.set_ylabel("2nd eigenvector")
ax.w_yaxis.set_ticklabels([])
ax.set_zlabel("3rd eigenvector")
ax.w_zaxis.set_ticklabels([])

plt.show()

"""# **Aplicação de RL na base de dados Iris**"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn import datasets

# importa os dados
iris = datasets.load_breast_cancer()
X = iris.data[:, :2] # utilizar as duas primeiras (0 e 1) features
y = iris.target

# Cria um modelo de regressao logistica e o treina com os dados (X, y)
#logreg = LogisticRegression()
logreg = LogisticRegression(C=1e5, solver='newton-cg')
logreg.fit(X, y)

#Verifica acurácia nos dados de treino
acc_treino = logreg.score(X, y)*100
print(f'Acurácia no treino: {acc_treino:.2f}%')

# Plota os limites de decisao das classes
x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
h = .02
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = logreg.predict(np.c_[xx.ravel(), yy.ravel()])

# Coloar os resultados em cores diferentes para cada classe
Z = Z.reshape(xx.shape)
plt.figure(1, figsize=(4, 3))
plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)

# Plota tambem os dados de treinamento
plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', cmap=plt.cm.Paired)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')

plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())
plt.xticks(())
plt.yticks(())

plt.show()

"""**Treinando e testando (dividindo a base de dados)**"""

#breast_cancer
#Maria CLara,Henrique,Gabriel,Flavia.
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn import datasets
from sklearn.model_selection import train_test_split

# importa os dados
cancer = datasets.load_breast_cancer ()
X = cancer.data[:, :2] # utilizar as duas primeiras (0 e 1) features
y = cancer.target

# partir o conjunto de dados em treino e teste
X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.3,random_state=1)



# Cria um modelo de regressao logistica e o treina com os dados (X, y)
#logreg = LogisticRegression()
#logreg = LogisticRegression(C=0.0070, liblinear='liblinear')
#logreg = LogisticRegression(C=0.0001, newton-cg='newton-cg')
#logreg = LogisticRegression(C=1.0000, lbgfgsr='lbgfgs')
#logreg = LogisticRegression(C=0.0015, saga='sag')
#logreg = LogisticRegression(C=0.0060, solver='solver')

logreg = LogisticRegression()

#logreg = LogisticRegression(C=1e5, solver='newton-cg')
logreg.fit(X_treino, y_treino)

#Verifica acurácia nos dados de treino
acc_treino = logreg.score(X_treino, y_treino)*100
print(f'Acurácia no treino: {acc_treino:.2f}%')

#Verifica acurácia nos dados de teste
acc_teste = logreg.score(X_teste, y_teste)*100
print(f'Acurácia no teste: {acc_teste:.2f}%')

"""**Limites de decisão das classes - Treino**"""

# Plota os limites de decisao das classes
x_min, x_max = X_treino[:, 0].min() - .5, X_treino[:, 0].max() + .5
y_min, y_max = X_treino[:, 1].min() - .5, X_treino[:, 1].max() + .5
h = .02
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = logreg.predict(np.c_[xx.ravel(), yy.ravel()])

# Coloar os resultados em cores diferentes para cada classe
Z = Z.reshape(xx.shape)
plt.figure(1, figsize=(4, 3))
plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)

# Plota tambem os dados de treinamento
plt.scatter(X_treino[:, 0], X_treino[:, 1], c=y_treino, edgecolors='k', cmap=plt.cm.Paired)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')

plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())
plt.xticks(())
plt.yticks(())

plt.show()

"""**Limites de decisão das classes - Teste**"""

# Plota os limites de decisao das classes
x_min, x_max = X_teste[:, 0].min() - .5, X_teste[:, 0].max() + .5
y_min, y_max = X_teste[:, 1].min() - .5, X_teste[:, 1].max() + .5
h = .02
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = logreg.predict(np.c_[xx.ravel(), yy.ravel()])

# Coloar os resultados em cores diferentes para cada classe
Z = Z.reshape(xx.shape)
plt.figure(1, figsize=(4, 3))
plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)

# Plota tambem os dados de teste
plt.scatter(X_teste[:, 0], X_teste[:, 1], c=y_teste, edgecolors='k', cmap=plt.cm.Paired)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')

plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())
plt.xticks(())
plt.yticks(())

plt.show()